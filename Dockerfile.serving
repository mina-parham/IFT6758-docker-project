# To build a container, you will use the docker build command
# https://docs.docker.com/engine/reference/commandline/build/
#
#   docker build -t <IMAGE TAG> -f Dockerfile.serving .
#   docker build -t <IMAGE TAG> -f Dockerfile.jupyter .
#


# https://docs.docker.com/engine/reference/builder/#from
# You shouldn't need to change this
FROM python:3.7

# https://docs.docker.com/engine/reference/builder/#workdir
# Create and cd into /code as your working directory
WORKDIR /code


# The main docker commands you will find useful:
# 
# Add a file or directory
# https://docs.docker.com/engine/reference/builder/#add
#
ADD ./serving ./serving
#
# Run a shell command (tip: chain shell commands with && rather than multiple RUN commands)
# https://docs.docker.com/engine/reference/builder/#run
#
#       RUN <SHELL COMMAND>   
#
# Set an environment variable:
# https://docs.docker.com/engine/reference/builder/#env
#
#       ENV <ENV_VAR>=<DEFAULT>
#
# Expose a port
# https://docs.docker.com/engine/reference/builder/#port
#
#       EXPOSE <PORT>
#
# Provide default command for executing container
# https://docs.docker.com/engine/reference/builder/#cmd
#
#       CMD <SHELL COMMAND>



# TODO: add code, optionally a default model if you want 
COPY . /code

# TODO: install libs
COPY ift6758/requirements.txt .
RUN pip install --upgrade pip
RUN pip install wheel
RUN pip install -r requirements.txt

COPY ift6758 .
RUN pip install -e ift6758

ADD ./serving/app.py ./app.py

# TODO: expose ports (or do this in docker-compose)
ENV SERVING_PORT=5000
EXPOSE ${SERVING_PORT}

# TODO: specify default command - this is not required because you can always specify the command
# either with the docker run command or in the docker-compose file
#CMD gunicorn --bind 0.0.0.0:${SERVING_PORT} app:app

CMD ["gunicorn"  , "--bind", "127.0.0.1:5000", "app:app"]

CMD [ "python3", "app.py"]
